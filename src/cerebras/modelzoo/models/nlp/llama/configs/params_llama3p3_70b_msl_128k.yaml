# LLaMa v3.3 model, 70B parameters, max_seq_length 131072

trainer:
  init:
    seed: 1
    model:
      name: llama
      # Embedding
      vocab_size: 128256
      hidden_size: 8192
      position_embedding_type: rotary
      pos_scaling_factor: 8.0
      rope_theta: 500000.0
      rotary_dim: 128
      share_embedding_weights: false
      max_position_embeddings: 131072
      embedding_dropout_rate: 0.0
      embedding_layer_norm: false
      pos_scaling_extra_args:
        high_freq_factor: 4.0
        low_freq_factor: 1.0
        original_max_position_embeddings: 8192
      pos_scaling_type: llama3
      # Decoder
      num_hidden_layers: 80
      dropout_rate: 0.0
      layer_norm_epsilon: 1.0e-05
      norm_type: rmsnorm
      # Decoder - Attention
      num_heads: 64
      attention_type: scaled_dot_product
      attention_module: multiquery_attention
      attention_dropout_rate: 0.0
      use_projection_bias_in_attention: false
      use_ffn_bias_in_attention: false
      extra_attention_params:
        num_kv_groups: 8
      # Decoder - ffn
      filter_size: 28672
      nonlinearity: swiglu
      use_ffn_bias: false
      # Task-specific
      use_bias_in_output: false
      loss_scaling: num_tokens
      loss_weight: 1.0
      # Initializer
      initializer_range: 0.02
    optimizer:
      AdamW:
        betas:
        - 0.9
        - 0.95
        correct_bias: true
        weight_decay: 0.1
    schedulers:
    - SequentialLR:
        schedulers:
        - LinearLR:
            initial_learning_rate: 0.0
            end_learning_rate: 7.5e-05
            total_iters: 40
        - CosineDecayLR:
            initial_learning_rate: 7.5e-05
            end_learning_rate: 7.5e-06
            total_iters: 240
    precision:
      # Cerebras parameters
      precision_opt_level: 1
      loss_scaling_factor: dynamic
      max_gradient_norm: 1.0
      log_loss_scale: true
    loop:
      # 590B tokens, total steps = 590*10^6/131072/16
      max_steps: 280
      eval_steps: 140
    checkpoint:
      steps: 140  # every epoch
      disable_strict_checkpoint_loading: true
      save_initial_checkpoint: false
    logging:
      log_steps: 1
    callbacks:
    - GlobalFlags:
        csx.debug.compile_crd_memory_gi: 70
        csx.debug.execute_crd_memory_gi: 70
    - ScopedTrainFlags:
        csx.performance.micro_batch_size: 1
    - ScopedValidateFlags:
        csx.performance.micro_batch_size: 1
    - ComputeNorm: {}
    - LoadCheckpointStates:
        load_checkpoint_states: model
    backend:
        backend_type: CSX
  fit:
    train_dataloader:
      data_processor: GptHDF5MapDataProcessor
      data_dir: ./datasets/mle_datasets/rpj_1t/rpj_1t_100k_llama3p1_msl128k_train
      # The effective batch size, which is evenly divided across "num_csx" systems used for the run
      batch_size: 16
      shuffle: true
      shuffle_seed: 1337
      num_workers: 8
      prefetch_factor: 10
      persistent_workers: true  # Important to avoid seeding at each epoch
    val_dataloader: &val_dataloader
      data_processor: GptHDF5MapDataProcessor
      data_dir: ./datasets/mle_datasets/rpj_1t/rpj_1t_100k_llama3p1_msl128k_val
      batch_size: 16
      shuffle: false
      num_workers: 8
  validate:
    val_dataloader: *val_dataloader
  validate_all:
    val_dataloaders: *val_dataloader