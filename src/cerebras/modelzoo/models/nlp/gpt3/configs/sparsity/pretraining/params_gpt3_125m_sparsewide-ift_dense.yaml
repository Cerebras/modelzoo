# A 125M parameter Cerebras-GPT model configuration designed for a single CS-2
# to run dense

trainer:
  init:
    backend:
      backend_type: CSX
    model:
      name: "gpt3"
      # Embedding
      hidden_size: 768
      position_embedding_type: learned
      share_embedding_weights: true
      max_position_embeddings: 1024
      vocab_size: 50257
      # Decoder
      num_hidden_layers: 12
      dropout_rate: 0.1
      layer_norm_epsilon: 1.0e-05
      # Decoder - Attention
      num_heads: 12
      attention_type: scaled_dot_product
      attention_dropout_rate: 0.1
      use_projection_bias_in_attention: true
      use_ffn_bias_in_attention: true
      # Decoder - ffn
      filter_size: 3072
      nonlinearity: gelu
      use_ffn_bias: true
      embedding_initializer:
        mean: 0.0
        name: truncated_normal
        std: 0.02
        a: -0.04
        b: 0.04
      initializer:
        mean: 0.0
        name: truncated_normal
        std: 0.02
        a: -0.04
        b: 0.04
      output_layer_initializer:
        mean: 0.0
        name: truncated_normal
        std: 0.004082482904638631
        a: -0.008164965809277261
        b: 0.008164965809277261
      # Task-specific
      loss_scaling: num_tokens
      loss_weight: 1.0
      use_bias_in_output: false
    optimizer:
      AdamW:
        betas:
        - 0.9
        - 0.95
        eps: 1.0e-08
        weight_decay: 0.1
        correct_bias: true
    schedulers:
    - SequentialLR:
        schedulers:
        - LinearLR:
            initial_learning_rate: 0.0
            end_learning_rate: 0.0006
            total_iters: 2151 # 10 epochs with Seq. Length = 1024 and Batch Size = 512
        - CosineDecayLR:
            initial_learning_rate: 0.0006
            end_learning_rate: 6.0e-05
            total_iters: 19360
    precision:
      # Cerebras parameters
      enabled: true
      fp16_type: cbfloat16
      precision_opt_level: 1
      loss_scaling_factor: dynamic
      max_gradient_norm: 1.0
      log_loss_scale: true
    loop:
      max_steps: 21511 # 100 epochs with Seq. Length = 1024 and Batch Size = 512
      eval_frequency: 2152
      eval_steps: 1
    checkpoint:
      steps: 2152
      save_initial_checkpoint: false
    logging:
      log_steps: 50
    callbacks:
    - ComputeNorm: {}
  fit:
    train_dataloader:
      data_processor: GptHDF5MapDataProcessor
      data_dir: ./language/datasets/wikitext-103_hdf5/train/
      shuffle: false
      # The effective batch size, which is evenly divided across "num_csx" systems used for the run
      batch_size: 512 # 512 global = (512 micro)*(1 csx)*(1 grad accum step)
      num_workers: 8
      prefetch_factor: 10
      persistent_workers: true
    val_dataloader: &val_dataloader
      data_processor: GptHDF5MapDataProcessor
      data_dir: ./language/datasets/wikitext-103_hdf5/valid/
      shuffle: false
      batch_size: 231
      num_workers: 1
      prefetch_factor: 10
      persistent_workers: true
  validate:
    val_dataloader: *val_dataloader
  validate_all:
    val_dataloaders: *val_dataloader
