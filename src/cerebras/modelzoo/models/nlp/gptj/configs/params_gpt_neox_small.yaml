trainer:
  init:
    backend:
      backend_type: CSX
    seed: 1
    model:
      name: "gptj"
      # Embedding
      vocab_size: 50277
      position_embedding_type: rotary
      share_embedding_weights: false
      embedding_dropout_rate: 0.0
      # Decoder Block
      hidden_size: 768
      num_heads: 12
      num_hidden_layers: 12
      max_position_embeddings: 2048
      attention_type: scaled_dot_product
      attention_dropout_rate: 0.0
      residual_dropout_rate: 0.0
      use_untied_layer_norm: true
      use_projection_bias_in_attention: true
      use_ffn_bias_in_attention: true
      use_ffn_bias: true
      filter_size: 3072 # 4 * hidden_size
      nonlinearity: gelu
      rotary_dim: 16 # hidden_size / num_heads * 25%
      layer_norm_epsilon: 1.0e-05
      use_bias_in_output: false
      initializer_range: 0.02
      loss_scaling: num_tokens
      loss_weight: 1.0
      # We use truncated_normal instead of normal ("ref: https://github.com/EleutherAI/gpt-neox/blob/main/configs/small.yml") with the same std and mean for better performance
      # Neox small config uses normal init with std=0.02, we chose to align with Neox 20B
      embedding_initializer:
        name: truncated_normal
        mean: 0.0
        std: 0.02282177322 # sqrt(2 / (5 * hidden_size))
      initializer:
        name: truncated_normal
        mean: 0.0
        std: 0.02282177322 # sqrt(2 / (5 * hidden_size))
      output_layer_initializer:
        name: truncated_normal
        mean: 0.0
        std: 0.0060140653 # 2 / num_hidden_layers / sqrt(hidden_size)
      fp16_type: cbfloat16
      mixed_precision: true
    optimizer:
      adamw:
        betas:
        - 0.9
        - 0.999
        eps: 1.0e-08
        weight_decay: 0.0
        correct_bias: true
    schedulers:
    - SequentialLR:
        schedulers:
        - LinearLR:
            total_iters: 3200 # warm-up 0.01
            initial_learning_rate: 0.0
            end_learning_rate: 0.0006
        - CosineDecayLR:
            initial_learning_rate: 0.0006
            total_iters: 316800
            end_learning_rate: 6.0e-05 # end_learning_rate = initial_learning_rate * alpha. alpha = 1.0 - beta1
    precision:
      enabled: true
      fp16_type: cbfloat16
      loss_scaling_factor: dynamic
      max_gradient_norm: 1.0
    loop:
      max_steps: 320000
      eval_frequency: 10000
    checkpoint:
      steps: 10000
    logging:
      log_steps: 100
  fit:
    train_dataloader:
      data_processor: GptHDF5MapDataProcessor
      data_dir:
      - ./shuffled/language/datasets/pile_original/hdf5_dataset/train_neox_msl2048/0/
      - ./shuffled/language/datasets/pile_original/hdf5_dataset/train_neox_msl2048/1/
      - ./shuffled/language/datasets/pile_original/hdf5_dataset/train_neox_msl2048/2/
      - ./shuffled/language/datasets/pile_original/hdf5_dataset/train_neox_msl2048/3/
      - ./shuffled/language/datasets/pile_original/hdf5_dataset/train_neox_msl2048/4/
      - ./shuffled/language/datasets/pile_original/hdf5_dataset/train_neox_msl2048/5/
      - ./shuffled/language/datasets/pile_original/hdf5_dataset/train_neox_msl2048/6/
      - ./shuffled/language/datasets/pile_original/hdf5_dataset/train_neox_msl2048/7/
      - ./shuffled/language/datasets/pile_original/hdf5_dataset/train_neox_msl2048/8/
      - ./shuffled/language/datasets/pile_original/hdf5_dataset/train_neox_msl2048/9/
      # batch_size = train_micro_bs * num_gpus * grad_accum_step / (model_parallel_size * pipeline_parallel_size)
      # based on the conversation with authors, this is our best guess on the batch sizes they used
      # The effective batch size, which is evenly divided across "num_csx" systems used for the run
      batch_size: 256
      shuffle: false
      shuffle_seed: 1337
      num_workers: 8
      prefetch_factor: 10
      persistent_workers: true # Important to avoid seeding at each epoch
    val_dataloader: &val_dataloader
      data_processor: GptHDF5MapDataProcessor
      data_dir: ./shuffled/language/datasets/pile_original/hdf5_dataset/val_neox_msl2048/
      batch_size: 256
      shuffle: false
      num_workers: 8
  validate:
    val_dataloader: *val_dataloader
  validate_all:
    val_dataloaders: *val_dataloader
