trainer:
  init:
    backend:
      backend_type: CSX
    seed: 1
    model:
      name: "gptj"
      # Embedding
      vocab_size: 50277
      position_embedding_type: rotary
      embedding_dropout_rate: 0.0
      share_embedding_weights: false
      # Decoder Block
      hidden_size: 2560
      num_heads: 32
      num_hidden_layers: 32
      max_position_embeddings: 2048
      attention_type: scaled_dot_product
      use_untied_layer_norm: true
      use_projection_bias_in_attention: true
      use_ffn_bias_in_attention: true
      use_ffn_bias: true
      filter_size: 10240
      nonlinearity: gelu
      attention_dropout_rate: 0.0
      residual_dropout_rate: 0.0
      rotary_dim: 80 # hidden_size / num_heads * rotary_pct(1.0), confirmed this with authors
      layer_norm_epsilon: 1.0e-05
      use_bias_in_output: false
      initializer_range: 0.02
      loss_scaling: num_tokens
      loss_weight: 1.0
      embedding_initializer:
        name: truncated_normal
        mean: 0.0
        std: 0.0125 # sqrt(2 / (5 * hidden_size))
      initializer:
        name: truncated_normal
        mean: 0.0
        std: 0.0125 # sqrt(2 / (5 * hidden_size))
      output_layer_initializer:
        name: truncated_normal
        mean: 0.0
        std: 0.0012352647110032732 # 2 / num_hidden_layers / sqrt(hidden_size)
      fp16_type: cbfloat16
      mixed_precision: true
    optimizer:
      adamw:
        betas:
        - 0.9
        - 0.999
        eps: 1.0e-08
        weight_decay: 0.0
        correct_bias: true
    schedulers:
    - SequentialLR:
        schedulers:
        - LinearLR:
            total_iters: 33098 # 1% of max_steps
            initial_learning_rate: 0.0
            end_learning_rate: 4.97e-05 # sqrt(198 / 2048) * 1.6e-4
        - CosineDecayLR:
            initial_learning_rate: 4.97e-05
            total_iters: 3276800 # 3309898 - 33098
            end_learning_rate: 4.97e-06 # (1.0 - 0.9) * 4.97e-5
    precision:
      enabled: true
      fp16_type: cbfloat16
      loss_scaling_factor: dynamic
      max_gradient_norm: 1.0
    loop:
      max_steps: 3309898 # 320000 * 2048 / 198
      eval_frequency: 5000
    checkpoint:
      steps: 5000
    logging:
      log_steps: 100
  fit:
    train_dataloader:
      data_processor: GptHDF5MapDataProcessor
      data_dir:
      - ./shuffled/language/datasets/pile_original/hdf5_dataset/train_neox_msl2048/0/
      - ./shuffled/language/datasets/pile_original/hdf5_dataset/train_neox_msl2048/1/
      - ./shuffled/language/datasets/pile_original/hdf5_dataset/train_neox_msl2048/2/
      - ./shuffled/language/datasets/pile_original/hdf5_dataset/train_neox_msl2048/3/
      - ./shuffled/language/datasets/pile_original/hdf5_dataset/train_neox_msl2048/4/
      - ./shuffled/language/datasets/pile_original/hdf5_dataset/train_neox_msl2048/5/
      - ./shuffled/language/datasets/pile_original/hdf5_dataset/train_neox_msl2048/6/
      - ./shuffled/language/datasets/pile_original/hdf5_dataset/train_neox_msl2048/7/
      - ./shuffled/language/datasets/pile_original/hdf5_dataset/train_neox_msl2048/8/
      - ./shuffled/language/datasets/pile_original/hdf5_dataset/train_neox_msl2048/9/
      # The effective batch size, which is evenly divided across "num_csx" systems used for the run
      batch_size: 198
      shuffle: false
      shuffle_seed: 1337
      num_workers: 8
      prefetch_factor: 10
      persistent_workers: true # Important to avoid seeding at each epoch
    val_dataloader: &val_dataloader
      data_processor: GptHDF5MapDataProcessor
      data_dir: ./shuffled/language/datasets/pile_original/hdf5_dataset/val_neox_msl2048/
      batch_size: 198
      shuffle: false
      num_workers: 8
      prefetch_factor: 10
      persistent_workers: true
  validate:
    val_dataloader: *val_dataloader
  validate_all:
    val_dataloaders: *val_dataloader
